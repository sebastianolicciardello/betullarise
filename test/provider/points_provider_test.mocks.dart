// Mocks generated by Mockito 5.4.6 from annotations
// in betullarise/test/provider/points_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:betullarise/database/points_database_helper.dart' as _i3;
import 'package:betullarise/model/point.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:sqflite_common_ffi/sqflite_ffi.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PointsDatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPointsDatabaseHelper extends _i1.Mock
    implements _i3.PointsDatabaseHelper {
  MockPointsDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<String> getDatabasePath() =>
      (super.noSuchMethod(
            Invocation.method(#getDatabasePath, []),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#getDatabasePath, []),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<int> insertPoint(_i6.Point? point) =>
      (super.noSuchMethod(
            Invocation.method(#insertPoint, [point]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deletePoint(int? referenceId, String? type) =>
      (super.noSuchMethod(
            Invocation.method(#deletePoint, [referenceId, type]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deletePointUndo(
    int? referenceId,
    String? type,
    int? insertTime,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deletePointUndo, [
              referenceId,
              type,
              insertTime,
            ]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<double> getTotalPoints() =>
      (super.noSuchMethod(
            Invocation.method(#getTotalPoints, []),
            returnValue: _i4.Future<double>.value(0.0),
          )
          as _i4.Future<double>);

  @override
  _i4.Future<_i6.Point?> queryPointByReferenceAndType(
    int? referenceId,
    String? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#queryPointByReferenceAndType, [
              referenceId,
              type,
            ]),
            returnValue: _i4.Future<_i6.Point?>.value(),
          )
          as _i4.Future<_i6.Point?>);

  @override
  _i4.Future<_i6.Point?> queryPointByReferenceIdOnlyPositiveTasks(
    int? referenceId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#queryPointByReferenceIdOnlyPositiveTasks, [
              referenceId,
            ]),
            returnValue: _i4.Future<_i6.Point?>.value(),
          )
          as _i4.Future<_i6.Point?>);

  @override
  _i4.Future<double> getTotalPointsByType(String? type) =>
      (super.noSuchMethod(
            Invocation.method(#getTotalPointsByType, [type]),
            returnValue: _i4.Future<double>.value(0.0),
          )
          as _i4.Future<double>);

  @override
  _i4.Future<List<_i6.Point>> getAllPoints() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPoints, []),
            returnValue: _i4.Future<List<_i6.Point>>.value(<_i6.Point>[]),
          )
          as _i4.Future<List<_i6.Point>>);

  @override
  _i4.Future<List<_i6.Point>> getPointsByType(String? type) =>
      (super.noSuchMethod(
            Invocation.method(#getPointsByType, [type]),
            returnValue: _i4.Future<List<_i6.Point>>.value(<_i6.Point>[]),
          )
          as _i4.Future<List<_i6.Point>>);
}
