// Mocks generated by Mockito 5.4.6 from annotations
// in betullarise/test/features/tasks/pages/task_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i11;

import 'package:betullarise/database/points_database_helper.dart' as _i7;
import 'package:betullarise/database/tasks_database_helper.dart' as _i4;
import 'package:betullarise/model/point.dart' as _i9;
import 'package:betullarise/model/task.dart' as _i6;
import 'package:betullarise/provider/points_provider.dart' as _i10;
import 'package:betullarise/services/ui/dialog_service.dart' as _i12;
import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:sqflite_common_ffi/sqflite_ffi.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDialogRoute_1<T> extends _i1.SmartFake
    implements _i3.DialogRoute<T> {
  _FakeDialogRoute_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TasksDatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksDatabaseHelper extends _i1.Mock
    implements _i4.TasksDatabaseHelper {
  MockTasksDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i5.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i5.Future<_i2.Database>);

  @override
  _i5.Future<int> insertTask(_i6.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#insertTask, [task]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i6.Task>> queryAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#queryAllTasks, []),
            returnValue: _i5.Future<List<_i6.Task>>.value(<_i6.Task>[]),
          )
          as _i5.Future<List<_i6.Task>>);

  @override
  _i5.Future<int> updateTask(_i6.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> deleteTask(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [id]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<_i6.Task?> queryTaskById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#queryTaskById, [id]),
            returnValue: _i5.Future<_i6.Task?>.value(),
          )
          as _i5.Future<_i6.Task?>);
}

/// A class which mocks [PointsDatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPointsDatabaseHelper extends _i1.Mock
    implements _i7.PointsDatabaseHelper {
  MockPointsDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i5.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i5.Future<_i2.Database>);

  @override
  _i5.Future<String> getDatabasePath() =>
      (super.noSuchMethod(
            Invocation.method(#getDatabasePath, []),
            returnValue: _i5.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#getDatabasePath, []),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<int> insertPoint(_i9.Point? point) =>
      (super.noSuchMethod(
            Invocation.method(#insertPoint, [point]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> deletePoint(int? referenceId, String? type) =>
      (super.noSuchMethod(
            Invocation.method(#deletePoint, [referenceId, type]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> deletePointUndo(
    int? referenceId,
    String? type,
    int? insertTime,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deletePointUndo, [
              referenceId,
              type,
              insertTime,
            ]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<double> getTotalPoints() =>
      (super.noSuchMethod(
            Invocation.method(#getTotalPoints, []),
            returnValue: _i5.Future<double>.value(0.0),
          )
          as _i5.Future<double>);

  @override
  _i5.Future<_i9.Point?> queryPointByReferenceAndType(
    int? referenceId,
    String? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#queryPointByReferenceAndType, [
              referenceId,
              type,
            ]),
            returnValue: _i5.Future<_i9.Point?>.value(),
          )
          as _i5.Future<_i9.Point?>);

  @override
  _i5.Future<_i9.Point?> queryPointByReferenceIdOnlyPositiveTasks(
    int? referenceId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#queryPointByReferenceIdOnlyPositiveTasks, [
              referenceId,
            ]),
            returnValue: _i5.Future<_i9.Point?>.value(),
          )
          as _i5.Future<_i9.Point?>);

  @override
  _i5.Future<double> getTotalPointsByType(String? type) =>
      (super.noSuchMethod(
            Invocation.method(#getTotalPointsByType, [type]),
            returnValue: _i5.Future<double>.value(0.0),
          )
          as _i5.Future<double>);

  @override
  _i5.Future<List<_i9.Point>> getAllPoints() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPoints, []),
            returnValue: _i5.Future<List<_i9.Point>>.value(<_i9.Point>[]),
          )
          as _i5.Future<List<_i9.Point>>);

  @override
  _i5.Future<List<_i9.Point>> getPointsByType(String? type) =>
      (super.noSuchMethod(
            Invocation.method(#getPointsByType, [type]),
            returnValue: _i5.Future<List<_i9.Point>>.value(<_i9.Point>[]),
          )
          as _i5.Future<List<_i9.Point>>);
}

/// A class which mocks [PointsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPointsProvider extends _i1.Mock implements _i10.PointsProvider {
  MockPointsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get totalPoints =>
      (super.noSuchMethod(Invocation.getter(#totalPoints), returnValue: 0.0)
          as double);

  @override
  double get taskPoints =>
      (super.noSuchMethod(Invocation.getter(#taskPoints), returnValue: 0.0)
          as double);

  @override
  double get habitPoints =>
      (super.noSuchMethod(Invocation.getter(#habitPoints), returnValue: 0.0)
          as double);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<void> loadAllPoints() =>
      (super.noSuchMethod(
            Invocation.method(#loadAllPoints, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> savePoints(_i9.Point? point) =>
      (super.noSuchMethod(
            Invocation.method(#savePoints, [point]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> removePoints(int? referenceId, String? type) =>
      (super.noSuchMethod(
            Invocation.method(#removePoints, [referenceId, type]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> removePointsByEntity(_i9.Point? point) =>
      (super.noSuchMethod(
            Invocation.method(#removePointsByEntity, [point]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i12.DialogService {
  MockDialogService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DialogRoute<dynamic> showLoadingDialog(
    _i3.BuildContext? context,
    String? message,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#showLoadingDialog, [context, message]),
            returnValue: _FakeDialogRoute_1<dynamic>(
              this,
              Invocation.method(#showLoadingDialog, [context, message]),
            ),
          )
          as _i3.DialogRoute<dynamic>);

  @override
  _i5.Future<bool?> showConfirmDialog(
    _i3.BuildContext? context,
    String? title,
    String? message, {
    String? confirmText = 'Continue',
    String? cancelText = 'Cancel',
    _i11.Color? confirmColor,
    bool? isDangerous = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #showConfirmDialog,
              [context, title, message],
              {
                #confirmText: confirmText,
                #cancelText: cancelText,
                #confirmColor: confirmColor,
                #isDangerous: isDangerous,
              },
            ),
            returnValue: _i5.Future<bool?>.value(),
          )
          as _i5.Future<bool?>);

  @override
  _i5.Future<void> showResultDialog(
    _i3.BuildContext? context,
    String? title,
    String? message, {
    String? buttonText = 'OK',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #showResultDialog,
              [context, title, message],
              {#buttonText: buttonText},
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> showInputDialog(
    _i3.BuildContext? context,
    String? title, {
    String? message,
    String? initialValue = '',
    String? labelText = '',
    String? confirmText = 'OK',
    String? cancelText = 'Cancel',
    _i3.TextInputType? keyboardType = _i3.TextInputType.text,
    String? Function(String?)? validator,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #showInputDialog,
              [context, title],
              {
                #message: message,
                #initialValue: initialValue,
                #labelText: labelText,
                #confirmText: confirmText,
                #cancelText: cancelText,
                #keyboardType: keyboardType,
                #validator: validator,
              },
            ),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<T?> showSelectionDialog<T>(
    _i3.BuildContext? context,
    String? title,
    List<T>? items, {
    String? message,
    String Function(T)? itemLabelBuilder,
    String? confirmText = 'OK',
    String? cancelText = 'Cancel',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #showSelectionDialog,
              [context, title, items],
              {
                #message: message,
                #itemLabelBuilder: itemLabelBuilder,
                #confirmText: confirmText,
                #cancelText: cancelText,
              },
            ),
            returnValue: _i5.Future<T?>.value(),
          )
          as _i5.Future<T?>);
}
