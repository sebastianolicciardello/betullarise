// Mocks generated by Mockito 5.4.6 from annotations
// in betullarise/test/features/settings/widgets/data_management_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:betullarise/services/database_export_import_service.dart'
    as _i3;
import 'package:betullarise/services/ui/dialog_service.dart' as _i5;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDialogRoute_0<T> extends _i1.SmartFake
    implements _i2.DialogRoute<T> {
  _FakeDialogRoute_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseExportImportService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseExportImportService extends _i1.Mock
    implements _i3.DatabaseExportImportService {
  @override
  _i4.Future<String?> exportData() =>
      (super.noSuchMethod(
            Invocation.method(#exportData, []),
            returnValue: _i4.Future<String?>.value(),
            returnValueForMissingStub: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<bool> importData() =>
      (super.noSuchMethod(
            Invocation.method(#importData, []),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i5.DialogService {
  @override
  _i2.DialogRoute<dynamic> showLoadingDialog(
    _i2.BuildContext? context,
    String? message,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#showLoadingDialog, [context, message]),
            returnValue: _FakeDialogRoute_0<dynamic>(
              this,
              Invocation.method(#showLoadingDialog, [context, message]),
            ),
            returnValueForMissingStub: _FakeDialogRoute_0<dynamic>(
              this,
              Invocation.method(#showLoadingDialog, [context, message]),
            ),
          )
          as _i2.DialogRoute<dynamic>);

  @override
  _i4.Future<bool?> showConfirmDialog(
    _i2.BuildContext? context,
    String? title,
    String? message, {
    String? confirmText = 'Continue',
    String? cancelText = 'Cancel',
    _i6.Color? confirmColor,
    bool? isDangerous = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #showConfirmDialog,
              [context, title, message],
              {
                #confirmText: confirmText,
                #cancelText: cancelText,
                #confirmColor: confirmColor,
                #isDangerous: isDangerous,
              },
            ),
            returnValue: _i4.Future<bool?>.value(),
            returnValueForMissingStub: _i4.Future<bool?>.value(),
          )
          as _i4.Future<bool?>);

  @override
  _i4.Future<void> showResultDialog(
    _i2.BuildContext? context,
    String? title,
    String? message, {
    String? buttonText = 'OK',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #showResultDialog,
              [context, title, message],
              {#buttonText: buttonText},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> showInputDialog(
    _i2.BuildContext? context,
    String? title, {
    String? message,
    String? initialValue = '',
    String? labelText = '',
    String? confirmText = 'OK',
    String? cancelText = 'Cancel',
    _i2.TextInputType? keyboardType = _i2.TextInputType.text,
    String? Function(String?)? validator,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #showInputDialog,
              [context, title],
              {
                #message: message,
                #initialValue: initialValue,
                #labelText: labelText,
                #confirmText: confirmText,
                #cancelText: cancelText,
                #keyboardType: keyboardType,
                #validator: validator,
              },
            ),
            returnValue: _i4.Future<String?>.value(),
            returnValueForMissingStub: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<T?> showSelectionDialog<T>(
    _i2.BuildContext? context,
    String? title,
    List<T>? items, {
    String? message,
    String Function(T)? itemLabelBuilder,
    String? confirmText = 'OK',
    String? cancelText = 'Cancel',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #showSelectionDialog,
              [context, title, items],
              {
                #message: message,
                #itemLabelBuilder: itemLabelBuilder,
                #confirmText: confirmText,
                #cancelText: cancelText,
              },
            ),
            returnValue: _i4.Future<T?>.value(),
            returnValueForMissingStub: _i4.Future<T?>.value(),
          )
          as _i4.Future<T?>);
}
