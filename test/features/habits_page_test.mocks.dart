// Mocks generated by Mockito 5.4.6 from annotations
// in betullarise/test/features/habits_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i9;

import 'package:betullarise/database/habits_database_helper.dart' as _i3;
import 'package:betullarise/model/habit.dart' as _i6;
import 'package:betullarise/model/point.dart' as _i8;
import 'package:betullarise/provider/points_provider.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:sqflite_common_ffi/sqflite_ffi.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HabitsDatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitsDatabaseHelper extends _i1.Mock
    implements _i3.HabitsDatabaseHelper {
  MockHabitsDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<String> getDatabasePath() =>
      (super.noSuchMethod(
            Invocation.method(#getDatabasePath, []),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#getDatabasePath, []),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<int> insertHabit(_i6.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#insertHabit, [habit]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.Habit>> queryAllHabits() =>
      (super.noSuchMethod(
            Invocation.method(#queryAllHabits, []),
            returnValue: _i4.Future<List<_i6.Habit>>.value(<_i6.Habit>[]),
          )
          as _i4.Future<List<_i6.Habit>>);

  @override
  _i4.Future<int> updateHabit(_i6.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#updateHabit, [habit]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteHabit(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteHabit, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<_i6.Habit?> queryHabitById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#queryHabitById, [id]),
            returnValue: _i4.Future<_i6.Habit?>.value(),
          )
          as _i4.Future<_i6.Habit?>);

  @override
  _i4.Future<List<_i6.Habit>> queryHabitsByType(String? type) =>
      (super.noSuchMethod(
            Invocation.method(#queryHabitsByType, [type]),
            returnValue: _i4.Future<List<_i6.Habit>>.value(<_i6.Habit>[]),
          )
          as _i4.Future<List<_i6.Habit>>);
}

/// A class which mocks [PointsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPointsProvider extends _i1.Mock implements _i7.PointsProvider {
  MockPointsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get totalPoints =>
      (super.noSuchMethod(Invocation.getter(#totalPoints), returnValue: 0.0)
          as double);

  @override
  double get taskPoints =>
      (super.noSuchMethod(Invocation.getter(#taskPoints), returnValue: 0.0)
          as double);

  @override
  double get habitPoints =>
      (super.noSuchMethod(Invocation.getter(#habitPoints), returnValue: 0.0)
          as double);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadAllPoints() =>
      (super.noSuchMethod(
            Invocation.method(#loadAllPoints, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> savePoints(_i8.Point? point) =>
      (super.noSuchMethod(
            Invocation.method(#savePoints, [point]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removePoints(int? referenceId, String? type) =>
      (super.noSuchMethod(
            Invocation.method(#removePoints, [referenceId, type]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removePointsByEntity(_i8.Point? point) =>
      (super.noSuchMethod(
            Invocation.method(#removePointsByEntity, [point]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
